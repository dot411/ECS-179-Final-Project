[gd_scene load_steps=8 format=3 uid="uid://dpululjkubu7"]

[ext_resource type="PackedScene" uid="uid://cv0h77i3d58qm" path="res://UI/Debug Setting/debug_setting.tscn" id="1_h68dx"]
[ext_resource type="Script" path="res://UI/Value Indicator/value_indicator.gd" id="3_da8ih"]
[ext_resource type="PackedScene" uid="uid://q6cwrhtyh68v" path="res://UI/Inventory Interface/inventory.tscn" id="3_ystsd"]
[ext_resource type="Texture2D" uid="uid://b2dx54o0sfvei" path="res://UI/temp_png/healthbarUnder.png" id="4_h1b5f"]
[ext_resource type="Texture2D" uid="uid://0as3fmv1talq" path="res://UI/temp_png/healthbarProgress.png" id="5_wm11r"]
[ext_resource type="PackedScene" uid="uid://cx2655inol7k4" path="res://UI/Game Message Manager/game_message.tscn" id="6_ko5h2"]

[sub_resource type="GDScript" id="GDScript_0p6qo"]
script/source = "class_name UI
extends Control

@onready var game_message_manager = $GameMessage
var is_inventory_visible:bool = false
var selected_slot = -1

func _ready():
	# Load the InventoryInterface node from the scene tree
	var inventory_interface = get_node_or_null(\"InventoryInterface\")  
	if inventory_interface:
		inventory_interface.connect(\"inventory_updated\", Callable(self,\"updated_inventory_visuals\"))
		inventory_interface.visible = false
	else:
		print(\"Error: InventoryInterface node not found.\")
# Receiver Functions
	game_message_manager.add_message(\"Welcome To Resident Medieval\",5.0)
	game_message_manager.add_message(\"Here is how to play\", 3.0)
	game_message_manager.add_message(\"Use 'WASD' to move , 'i' for inventory, 'inventory Keybinds are #'s 0-9\", 8.0)
	await get_tree().create_timer(20).timeout
	game_message_manager.clear_messages()
# Append a game message (dialogue) that lasts _time seconds to the queue
# Game messages should be displayed from the queue one by one until the queue becomes empty
func append_game_message_request(_text: String, _time: float):
	var game_message_manager = get_node_or_null(\"GameMessage\")
	if game_message_manager:
		game_message_manager.add_message(_text, _time)
	else:
		print(\"error\")

# Update the interface to reflect the change
# Erase the item from player_inventory if to_amount == 0
func player_item_amount_changed(player_inventory: Array[ItemData], item: ItemData, to_amount: int):
	var inventory_interface = get_node(\"InventoryInterface\")
	if inventory_interface:
		inventory_interface.update_item_quantity(item, to_amount)
	else:
		print(\"Error: InventoryInterface node not found.\")

# Assign and update item.slot_id to keep track of their position in the inventory interface
func player_gains_new_item(player_inventory: Array[ItemData], item: ItemData):
	var inventory_interface = get_node(\"InventoryInterface\")
	if inventory_interface:
		if not inventory_interface.add_item(item):
			print(\"Inventory Full\")
	else:
		print(\"Error: InventoryInterface node not found.\")
# this function will serve as keybinds for UI

func _input(event):
	#here we will handle toggle 
	if event.is_action_pressed(\"ui_toggle_inventory\"):
		is_inventory_visible = !is_inventory_visible
		var inventory_interface = get_node(\"InventoryInterface\")  
		if inventory_interface:
			inventory_interface.visible = is_inventory_visible
	
	if is_inventory_visible:
		for i in range(1,11):
			if event.is_action_pressed(\"select_slot_%d\"%i):
				selected_slot = i - 1
				print(\"Selected Slot: %d\" %selected_slot)
				
				var inventory_interface =  get_node(\"InventoryInterface\")
				if inventory_interface:
					inventory_interface._on_slot_pressed(selected_slot)
					inventory_interface.set_focus_on_slot(selected_slot)




# Update visual for HP
func player_HP_update_request(current_HP: int, max_HP: int):
	var value_indicator = get_node(\"ValueIndicator\")
	print(value_indicator)
	if value_indicator:
	
		value_indicator.update_health(current_HP, max_HP)

# Fatigued means that the player is in a cooldown period waiting for fatigue to drop to zero
func player_fatigue_update_request(current_fatigue: float, max_fatigue: float, fatigued: bool):
	var value_indicator = get_node(\"ValueIndicator\")
	if value_indicator:
		value_indicator.update_fatigue(current_fatigue, max_fatigue, fatigued)

func player_attack_attribute_update_request(attack: int):
	pass

func player_ability_power_attribute_update_request(ability_power: int):
	pass

func obj_healed(_node: Obj, amount: int):
	# _node.add_child(heal_indicator)
	pass

func obj_damaged(_node: Obj, amount: int):
	# _node.add_child(damage_indicator)
	pass

# Emitter Functions

# Emit if a new item is selected from the action bar
func item_selected_from_action_bar(item: ItemData):
	get_player_node().select_item(item)
	

# Helper Functions
func get_player_node():
	return Utility.get_player_node()
"

[node name="UI" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_0p6qo")

[node name="Debug Setting" parent="." instance=ExtResource("1_h68dx")]

[node name="InventoryInterface" parent="." instance=ExtResource("3_ystsd")]
layout_mode = 1
offset_left = -71.0
offset_top = 64.0
offset_right = -630.0
offset_bottom = -315.0

[node name="ValueIndicator" type="Control" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 7.0
offset_top = -3.0
offset_right = -730.0
offset_bottom = -578.0
grow_horizontal = 2
grow_vertical = 2
scale = Vector2(2, 2)
script = ExtResource("3_da8ih")

[node name="HealthBar" type="TextureProgressBar" parent="ValueIndicator"]
layout_mode = 1
anchors_preset = -1
offset_left = -2.66667
offset_right = 61.3333
offset_bottom = 10.0
nine_patch_stretch = true
texture_under = ExtResource("4_h1b5f")
texture_progress = ExtResource("5_wm11r")

[node name="FatigueBar" type="TextureProgressBar" parent="ValueIndicator"]
layout_mode = 1
anchors_preset = -1
anchor_right = 0.19
offset_left = -2.66667
offset_top = 13.0
offset_right = 61.3333
offset_bottom = 23.0
texture_under = ExtResource("4_h1b5f")
texture_progress = ExtResource("5_wm11r")
tint_progress = Color(0.0980392, 0.184314, 1, 1)

[node name="GameMessage" parent="." instance=ExtResource("6_ko5h2")]
layout_mode = 1
anchors_preset = 0
anchor_right = 0.0
anchor_bottom = 0.0
offset_left = 300.0
offset_top = 530.0
offset_right = 966.0
offset_bottom = 660.0
